<?xml version="1.0" encoding="UTF-8"?***REMOVED***
<!--
	Application context definition for PetClinic on JPA.
--***REMOVED***
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"***REMOVED***

	<!-- ========================= RESOURCE DEFINITIONS ========================= --***REMOVED***

	<!--
		Activates a load-time weaver for the context. Any bean within the context that
		implements LoadTimeWeaverAware (such as LocalContainerEntityManagerFactoryBean)
		will receive a reference to the autodetected load-time weaver.
	--***REMOVED***
	<context:load-time-weaver/***REMOVED***

	<!-- Configurer that replaces ${***REMOVED******REMOVED*** placeholders with values from a properties file --***REMOVED***
	<!-- (in this case, JDBC-related settings for the dataSource definition below) --***REMOVED***
	<context:property-placeholder location="classpath:jdbc.properties"/***REMOVED***

	<!--
		Uses Apache Commons DBCP for connection pooling. See Commons DBCP documentation
		for the required JAR files. Alternatively you can use another connection pool
		such as C3P0, similarly configured using Spring.
	--***REMOVED***
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
			p:driverClassName="${jdbc.driverClassName***REMOVED***" p:url="${jdbc.url***REMOVED***" p:username="${jdbc.username***REMOVED***"
			p:password="${jdbc.password***REMOVED***"/***REMOVED***

	<!-- JNDI DataSource for JEE environments --***REMOVED***
	<!--
	<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/petclinic"/***REMOVED***
	--***REMOVED***

	<!-- JPA EntityManagerFactory --***REMOVED***
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
			p:dataSource-ref="dataSource"***REMOVED***
		<property name="jpaVendorAdapter"***REMOVED***
			<bean class="org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter"
					p:databasePlatform="${jpa.databasePlatform***REMOVED***" p:showSql="${jpa.showSql***REMOVED***"/***REMOVED***
			<!--
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter"
					p:database="${jpa.database***REMOVED***" p:showSql="${jpa.showSql***REMOVED***"/***REMOVED***
			--***REMOVED***
			<!--
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
					p:database="${jpa.database***REMOVED***" p:showSql="${jpa.showSql***REMOVED***"/***REMOVED***
			--***REMOVED***
		</property***REMOVED***
	</bean***REMOVED***

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) --***REMOVED***
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
			p:entityManagerFactory-ref="entityManagerFactory"/***REMOVED***


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= --***REMOVED***

	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	--***REMOVED***
	<context:annotation-config/***REMOVED***

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
	--***REMOVED***
	<tx:annotation-driven mode="aspectj"/***REMOVED***

	<!--
		Simply defining this bean will cause requests to owner names to be saved.
		This aspect is defined in petclinic.jar's META-INF/aop.xml file.
		Note that we can dependency inject this bean like any other bean.
	--***REMOVED***
	<bean class="org.springframework.samples.petclinic.aspects.UsageLogAspect" p:historySize="300"/***REMOVED***

	<!--
		Post-processor to perform exception translation on @Repository classes (from native
		exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
	--***REMOVED***
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/***REMOVED***

	<!--
		Will automatically be transactional due to @Transactional.
		EntityManager will be auto-injected due to @PersistenceContext.
		PersistenceExceptions will be auto-translated due to @Repository.
	--***REMOVED***
	<bean id="clinic" class="org.springframework.samples.petclinic.jpa.EntityManagerClinic"/***REMOVED***

</beans***REMOVED***
